#!/bin/bash
#=====================================================
#  _                _     _
# | |    ___   __ _(_)___| |_ _____  __
# | |   / _ \ / _` | / __| __/ _ \ \/ /
# | |__| (_) | (_| | \__ \ ||  __/>  <
# |_____\___/ \__, |_|___/\__\___/_/\_\
#             |___/
#=====================================================
#   ____       __  ___
#  / __ \___  /  |/  /__ ____  ___ ____ ____ ____
# / /_/ / _ \/ /|_/ / _ `/ _ \/ _ `/ _ `/ -_) __/
# \____/ .__/_/  /_/\_,_/_//_/\_,_/\_, /\__/_/
#     /_/                         /___/
#=====================================================

#################################
#   configure snmp V3           #
#   for OpManager               #
#################################
#   Logistex 06/2022
#   Olly Keran

#date in preferred format
now=$(date +"%Y%m%d")

## init config
## currently set to my dir for testing 
## chang to $HOME/support/OpManager/opmanager.conf, when use on live
#backup_path="$HOME/support/OpManager"
## add error handling > pass to gen new configfile

# Color_Off='\033[0m'       # Text Reset
# # Regular Colors
# Black='\033[0;30m'        # Black
# Red='\033[0;31m'          # Red
# Green='\033[0;32m'        # Green
# Yellow='\033[0;33m'       # Yellow
# Blue='\033[0;34m'         # Blue
# Purple='\033[0;35m'       # Purple
# Cyan='\033[0;36m'         # Cyan
# White='\033[0;37m'        # White

## init logs
#set -x
init_logs() {
    cd "$log_location" || return 1
    touch "$now.log"
    logfile="$now.log"
    exec &> >(tee -a "$logfile")
}

show_config() {
    cat $config_path
}

okmsg() {
    echo -e -n "\033[0;32m=> \033[0m"
}

errmsg() {
    echo -e -n "\033[0;31m=> \033[0m"
}

#TODO
### needs alot of error checking
check_config() {   
    local lu=false
    local sitec=false
    local uname=false
    local pwd=false 
    echo ""
    echo "====================Config Check===================="
    if [ -z "$localusername" ]; then
        errmsg 
        echo "Project Account Name: üëé"
        echo "Please enter local username in configfile $config_path" 
        else
        okmsg
        echo "Project Account Name: $localusername üëç"
        lu=true
    fi 
    if [ -z "$site" ]; then 
        errmsg
        echo "Name of Site: üëé"
        echo "Please enter site in configfile $config_path"
        else
        okmsg
        echo "Name of Site: $site üëç"
        sitec=true
    fi
    if [ -z "$snmpusername" ]; then 
        errmsg
        echo "SNMPusername: üëé"
        echo "Please enter snmpusername in configfile $config_path"
        else
        okmsg
        echo "SNMPusername: $snmpusername üëç"
        uname=true
    fi
    if [ -z "$snmppassword" ]; then 
        errmsg
        echo "SNMPusername: üëé"
        echo "Please enter snmppassword in configfile $config_path"
        else
        okmsg
        echo "SNMPpassword: $snmppassword üëç"
        echo ""
        pwd=true
    fi 
    if [[ $lu = true ]] && [[ $sitec = true ]] && [[ $uname = true ]] && [[ $pwd = true ]]; then 
        return 0 
        else 
        return 1
    fi 
    # make iterative?

    # while read conf; do if [ -z conf ]; then echo "please complete config file Field: "$conf""; done < $config_path
    #  local state="NOT-SET"
    #     configs=("site" "localusername" "snmpusername" "snmppassword")
    # while read conf; do
    #         for str in ${configs[@]}; do 
    #             if [ $str == conf ]; then 
    #                 if [ -n conf ]; then
    #                 state="SET" 
    #         fi
    #         done  
            
    #         echo $state 
    #     done < "$config_path"
}

get_permissions() {
    #check if run as root
    if (( EUID != 0 )); then
        errmsg
        echo "Please run as root..."
        exit 1
    fi
    return 0
}

if_empty() {
    local files
    files=$(ls -qAH -- /home/chair/.ssh)
    if [ -z "$files" ]; then 
        return 0
    fi
    return 1
}

Help() {
    echo ""
    echo -e "\033[0;32m  SNMP config for OpManager \033[0m"
    echo ""
    echo -e "  Syntax: $ snmp  \033[0;33m[-d|h|k|q|c|r]\033[0m"
    echo ""
    echo "  -d         Do it"
    echo "  -h         Print this help page"
    echo "  -k         Generate new keys for site and add them to auth_keys"    
    echo "  -q         Quick check"
    echo "  -c         Check with verbose(ish) output"
    echo "  -r         Remove chair user and snmp packages"
    echo ""
}

gen_keys() {
    if [ -d /home/chair/.ssh ]; then
    # the directory exists
        if [ if_empty == 0 ]; then
        #check for presence of anything to prevent overwriting
            if [[ -f "$site" ]]; then
                errmsg
                echo "Key-Pair already generated"        
                else
                #RSA 4096 no passphrase
                ssh-keygen -t rsa -b 4096 -f /home/chair/.ssh/"$site" -P
                okmsg
                echo "Keys generated"
                #copy backups to support
                cp -pv "$site" $localusername/support/OpManager
                cp -pv "$site".pub $localusername/support/OpManager
                okmsg
                echo "$site_$now key backed up to $localusername/support/OpManager"
            fi
            errmsg
        fi  
        errmsg
    fi 
}

new_gen() {
    #cd /home/chair/.ssh #|| errmsg && echo "/.ssh not accesible" && return 1
    if [ -d "/home/chair" ]; then
        if [ -f "/home/chair/.ssh/$site" ]; then
            errmsg
            echo "SSH key already present not"
            return 1
        else
            #RSA 4096 no passphrase
            ssh-keygen -t rsa -b 4096 -f /home/chair/.ssh/"$site" -C "$site" -q -N "" && okmsg && echo "Keys generated"
            #copy backups to support
            cp -pv "$site" /home/$localusername/support/OpManager && cp -pv "$site".pub /home/$localusername/support/OpManager && okmsg && echo "$site_$now key backed up to $localusername/support/OpManager"   
            return 0 
        fi
    else 
        errmsg
        echo 'Chair user not yet created, run -d to setup'
    fi    
}

apply_keys() {
    if [[ -f "/home/chair/.ssh/$site" ]]; then
        # append to authkeys
        cat "/home/chair/.ssh/$site.pub" >> "/home/chair/.ssh/authorized_keys"
        okmsg
        echo "Public key added to /home/chair/.ssh/authorized_keys"
    else
        errmsg
        echo "Public key not found"
        return 1
    fi
    return 0
}

make_chair_user() {
    #create user + pass + perms
    useradd -m chair
    echo -e "OpManager2022\nOpManager2022" | passwd chair
    # TODO 
    # change it to read in from the config file 
    #chpasswd chair:OpManager2022
    usermod -aG wheel chair
    okmsg
    echo "Chair user created"
    #cd to user dir
    #cd /home/chair || echo "directory not found" && return 1
    #make .ssh with perms  
}

make_ssh() {
    mkdir -pv /home/chair/.ssh && okmsg && echo "/.ssh created"
    chmod 700 /home/chair/.ssh && okmsg && echo "/.ssh permission set to 700"
    #make authkeys + perms
    touch /home/chair/.ssh/authorized_keys && okmsg && echo "authorised_keys created"
    chmod 600 /home/chair/.ssh/authorized_keys && okmsg && echo "authorized_keys permission set to 600"
    chown chair:chair /home/chair/.ssh && okmsg && echo ".ssh ownership set to chair"
    chown chair:chair /home/chair/.ssh/authorized_keys && okmsg && echo "authorised_keys ownership set to chair"
    #create backup with date 
    if [ -s "/home/chair/.ssh/authorized_keys" ]; then
    cp /home/chair/.ssh/authorized_keys /home/chair/.ssh/authorized_keys"$now" 
    chown chair:chair /home/chair/.ssh/authorized_keys"$now"
    okmsg 
    echo "authorized_keys backed up"
    fi
}

del_chair_user() {
    #removes chair user and home directory
    #only used for testing purposes
    userdel --remove chair
    okmsg
    echo "Chair user removed"
    return 0 
}

install_snmp() {
    yum -q check-update
    yum -y -q install net-snmp net-snmp-utils net-snmp-devel 
    okmsg
    echo "SNMP packages installed"
    return 0 
}

remove_snmp() {
    yum -y -q remove net-snmp net-snmp-utils net-snmp-devel 
    okmsg
    echo "SNMP packages removed"
    return 0   
}

ssh_permission_check () {
    local ssh=false
    local auth=false
    echo "====================SSH check===================="
    if [ -d "/home/chair/.ssh" ]; then
    okmsg
    echo '.ssh exists'
        if [[ $(stat -L -c "%a" /home/chair/.ssh) = 700 ]]; then 
        okmsg
        echo ".ssh permissions ok: $(stat -L -c "%a" /home/chair/.ssh)"
        ssh=true
        else    
        errmsg
        echo ".ssh has permissions $(stat -L -c "%a" /home/chair/.ssh), please run -d to fix"
        fi 
    else 
    errmsg
    echo ".ssh does not yet exist run with -d to setup"
    fi

    if [ -f "/home/chair/.ssh/authorized_keys" ]; then
    okmsg
    echo 'authorized_keys exists'
        if [[ $(stat -L -c "%a" /home/chair/.ssh/authorized_keys) = 600 ]]; then 
        okmsg
        echo "authorized_keys permissions ok: $(stat -L -c "%a" /home/chair/.ssh/authorized_keys)"
        auth=true
        else    
        errmsg
        echo "authorized_keys has permissions $(stat -L -c "%a" /home/chair/.ssh/authorized_keys), please run -d to fix"
        echo ""
        fi 
    else 
    errmsg
    echo "authorised_keys does not yet exist run with -d to setup"
    echo ""
    fi
    if [[ $ssh = true ]] && [[ $auth = true ]]; then
        return 0 
        else 
        return 1
    fi
}

ssh_owner_check () {
    local ssh=false
    local auth=false
    if [[ $(stat -c "%U" /home/chair/.ssh) = "chair" ]]; then 
        okmsg
        echo ".ssh ownership ok "
        ssh=true
        else
        errmsg
        echo ".ssh ownership set to $(stat -c "%U" /home/chair/.ssh)"
    fi 
    if [[ $(stat -c "%U" /home/chair/.ssh/authorized_keys) = "chair" ]]; then 
        okmsg
        echo "authorized_keys ownership ok "
        auth=true
        else
        errmsg
        echo "authorized_keys ownership set to $(stat -c "%U" /home/chair/.ssh/authorized_keys)"
    fi 

    if [[ $ssh = true ]] && [[ $auth = true ]]; then
        return 0 
        else 
        return 1
    fi
}

#TODO 
#just copy over existing config file instead of editing 
#may hav eto use the username and paswd from config 
#copy file > find and replace with $s 
#using easy to find pattern
snmpv3_setup() {
    systemctl stop snmpd
    net-snmp-create-v3-user -ro -x AES -a SHA -A "$snmppassword" -X "$snmppassword" "$snmpusername"
    echo "rouser $snmpusername AuthPriv" >> snmp.conf
    okmsg
    echo "SNMP v3 user created"
    #look how to escape quotes
    #echo "createUser "$snmpusername" SHA "$snmppassword" AES "$snmppassword"" >> /var/lib/net-snmp/snmpd.conf
    # ## may need to be inserted into specific section
    # echo 'rouser ChairHotline' >> /etc/snmp/snmpd.conf
    # echo 'AuthPriv' >> /etc/snmp/snmpd.conf
}

sysd_conf() {
    ## direct output to /dev/null to cleanup 
    systemctl -q enable snmpd && systemctl -q start snmpd && systemctl -q status snmpd 
    okmsg
    echo "SNMP service enabled"
}

firewall_config() {
    # check if firewall cmd is running first
    if [ $(systemctl is-active --quiet firewalld) ]; then
        firewall-cmd --zone=public --add-port=161/udp --permanent --quiet && firewall-cmd --zone=public --add-port=161/tcp --permanent --quiet && firewall-cmd --zone=public --add-port=162/udp --permanent --quiet && firewall-cmd --zone=public --add-port=162/tcp --permanent --quiet && firewall-cmd --reload --quiet
        okmsg
        echo "=> Ports 161, 162 rule created through firewalld"
    fi
    return 0 
}

test_walk() {
    snmpwalk -v 3 -u "$snmpusername" -l AuthPriv -x AES -a SHA -X "$snmppassword" -A "$snmppassword" localhost .1.3.6.1.2.1.1 1> /dev/null && okmsg && echo 'SNMP-walk completed' 
}

get_permissions
config_path=$(find /home -name *opmanager.conf*)
source "$config_path"

while getopts "hdkrcpqa" option; do
    case "$option" in
            k) #keys
                get_permissions
                new_gen && apply_keys
            ;;
            a)
            apply_keys
            ;;
            d) #do it
                get_permissions
                install_snmp
                make_chair_user
                make_ssh
                snmpv3_setup
                sysd_conf
                firewall_config
                test_walk
            ;;
            r) #remove
                remove_snmp
                del_chair_user
            ;;
            h) # display Help
                Help
            exit;;
            c) #check
                check_config
                ssh_permission_check
                ssh_owner_check
            exit;;
            p) #permissions
                make_ssh
            ;;
            q)
                check_config 1>/dev/null && ssh_owner_check 1>/dev/null && ssh_permission_check 1>/dev/null && echo "checks: ok" || errmsg && echo -e "Checks: not ok"  "\nRun -c for verbose output"
            ;;
            :)
            errmsg
            echo 'please pass an option, see -h for details'
            ;;
            \? )
                echo "Invalid Option"
                Help
            exit;;   
            ## show config option 
            ## check config option 
                ## add error handles
            ## gennew config file option
    esac
done

#TODO 
#snmp conf file 
#snmp conf file check
#snmp walk settings 
#snmpwalk options
#handle stat errs